<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian )"/>
<info value = "kernel_interface.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
9 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
11 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
8 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
10 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
8 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
10 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
7 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
9 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<elapsed_time value = "greedy_algorithm(const Matrix_type& x_, size_t N, std::set<size_t> start_indices = std::set<size_t>())">
<elapsed_time value = "discrepancy_fun::discrepancy_fun(const Matrix_type& x_, std::set<size_t> start_indices)">
<elapsed_time value = "KXY_1(const std::vector<Vector_type >& x, const std::vector<Vector_type>& y, std::function<double(Vector_type const& v1, Vector_type const& v2)>& fun)">
1 ms
</elapsed_time>
1 ms
</elapsed_time>
25 ms
</elapsed_time>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<elapsed_time value = "codpy::op::Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "shared_basis::Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1024, Ny:128, D:2
<elapsed_time value = "Kernel::Dnm">
Kernel::Dnm Nx:1024, Ny:128, D:2
3 ms
</elapsed_time>
3 ms
</elapsed_time>
Dnm::out Nx:1024, Ny:128
4 ms
</elapsed_time>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian )"/>
<info value = "kernel_interface.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
7 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
9 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
7 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
9 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian )"/>
<info value = "kernel_interface.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
7 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
9 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
7 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
9 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
7 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
9 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
7 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
9 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<elapsed_time value = "greedy_algorithm(const Matrix_type& x_, size_t N, std::set<size_t> start_indices = std::set<size_t>())">
<elapsed_time value = "discrepancy_fun::discrepancy_fun(const Matrix_type& x_, std::set<size_t> start_indices)">
<elapsed_time value = "KXY_1(const std::vector<Vector_type >& x, const std::vector<Vector_type>& y, std::function<double(Vector_type const& v1, Vector_type const& v2)>& fun)">
1 ms
</elapsed_time>
1 ms
</elapsed_time>
26 ms
</elapsed_time>
<info value = "alg.sharp_discrepancy(pi_array_type& x, size_t N, size_t nmax = 10)"/>
<elapsed_time value = "Gaussian::sharp_discrepancy(const Matrix_type& x, size_t N, size_t max_iteration_ = 10)">
x:2,1024N =128, max_iteration:10
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
8 ms
</elapsed_time>
<elapsed_time value = "rearrangement_functional::rearrangement_functional()(std::vector<size_t>& permutation)">
rearrangement_functional::()(std::vector<size_t>& permutation) Ny:128 N:1024

<info cost =" W ">0.00336557 </info>

<info cost =" W ">-0.0222385 </info>

<info cost =" W ">-0.0222396 </info>

<info cost =" W ">-0.0222399 </info>

<info cost =" W ">-0.02224 </info>

<info cost ="-0.02224" count = "5"/>
32 ms
</elapsed_time>
<elapsed_time value = "grad_match::grad_match(const Matrix_type& y_)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1024:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
8 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.740494")>0.740494</info>
9 ms
</elapsed_time>
9 ms
</elapsed_time>
<elapsed_time value = "descent_algorithm">
<elapsed_time value = "grad_match::grad">
86 ms
</elapsed_time>
<loop error_ = 4.95948e-06test_grad_:1.11022e-08 grad22_: 1.50581e-11 dt: -4.99323e-09 a: 2.22346</loop>
******descent_algorithm r.first:-4.99323e-09 error: 4.95948e-06 a: -0.00603142
<elapsed_time value = "grad_match::grad">
81 ms
</elapsed_time>
<loop error_ = 4.95948e-06test_grad_:0 grad22_: 1.50581e-11 dt: -0 a: 0.00301162</loop>
******descent_algorithm r.first:-0 error: 4.95948e-06 a: -nan(ind)
<elapsed_time value = "grad_match::grad">
85 ms
</elapsed_time>
<loop error_ = 4.95948e-06test_grad_:0 grad22_: 1.50581e-11 dt: -0 a: 0.00301162</loop>
******descent_algorithm r.first:-0 error: 4.95948e-06 a: -nan(ind)
<elapsed_time value = "grad_match::grad">
90 ms
</elapsed_time>
<loop error_ = 4.95948e-06test_grad_:0 grad22_: 1.50581e-11 dt: -0 a: 0.00301162</loop>
******descent_algorithm r.first:-0 error: 4.95948e-06 a: -nan(ind)
<elapsed_time value = "grad_match::grad">
89 ms
</elapsed_time>
<loop error_ = 4.95948e-06test_grad_:0 grad22_: 1.50581e-11 dt: -0 a: 0.00301162</loop>
******descent_algorithm r.first:-0 error: 4.95948e-06 a: -nan(ind)
<elapsed_time value = "grad_match::grad">
94 ms
</elapsed_time>
<loop error_ = 4.95948e-06test_grad_:0 grad22_: 1.50581e-11 dt: -0 a: 0.00301162</loop>
******descent_algorithm r.first:-0 error: 4.95948e-06 a: -nan(ind)
<elapsed_time value = "grad_match::grad">
88 ms
</elapsed_time>
<loop error_ = 4.95948e-06test_grad_:0 grad22_: 1.50581e-11 dt: -0 a: 0.00301162</loop>
******descent_algorithm r.first:-0 error: 4.95948e-06 a: -nan(ind)
<elapsed_time value = "grad_match::grad">
91 ms
</elapsed_time>
<loop error_ = 4.95948e-06test_grad_:0 grad22_: 1.50581e-11 dt: -0 a: 0.00301162</loop>
******descent_algorithm r.first:-0 error: 4.95948e-06 a: -nan(ind)
<elapsed_time value = "grad_match::grad">
93 ms
</elapsed_time>
<loop error_ = 4.95948e-06test_grad_:0 grad22_: 1.50581e-11 dt: -0 a: 0.00301162</loop>
******descent_algorithm r.first:-0 error: 4.95948e-06 a: -nan(ind)
<elapsed_time value = "grad_match::grad">
87 ms
</elapsed_time>
<loop error_ = 4.95948e-06test_grad_:0 grad22_: 1.50581e-11 dt: -0 a: 0.00301162</loop>
******descent_algorithm r.first:-0 error: 4.95948e-06 a: -nan(ind)
<elapsed_time value = "grad_match::grad">
91 ms
</elapsed_time>
<loop error_ = 4.95948e-06test_grad_:0 grad22_: 1.50581e-11 dt: -0 a: 0.00301162</loop>
******descent_algorithm r.first:-0 error: 4.95948e-06 a: -nan(ind)
<elapsed_time value = "grad_match::grad">
92 ms
</elapsed_time>
<end error = "4.95948e-06" grad22_= "1.50581e-11" dt= "-0 iter: 11"/>
1101 ms
</elapsed_time>
1158 ms
</elapsed_time>
</info>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<elapsed_time value = "codpy::op::Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "shared_basis::Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1024, Ny:128, D:2
<elapsed_time value = "Kernel::Dnm">
Kernel::Dnm Nx:1024, Ny:128, D:2
3 ms
</elapsed_time>
3 ms
</elapsed_time>
Dnm::out Nx:1024, Ny:128
4 ms
</elapsed_time>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian )"/>
<info value = "kernel_interface.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
8 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
10 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
7 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
9 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian )"/>
<info value = "kernel_interface.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
8 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
10 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
9 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
11 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian )"/>
<info value = "kernel_interface.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
8 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
11 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
8 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
11 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<elapsed_time value = "codpy::op::Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "shared_basis::Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1024, Ny:128, D:2
<elapsed_time value = "Kernel::Dnm">
Kernel::Dnm Nx:1024, Ny:128, D:2
3 ms
</elapsed_time>
3 ms
</elapsed_time>
Dnm::out Nx:1024, Ny:128
4 ms
</elapsed_time>
<elapsed_time value = "codpy::op::Dnm(pi_array_type& x, pi_array_type& y)">
<elapsed_time value = "shared_basis::Dnm(pi_array_type& x, pi_array_type& y)">
shared_basis::Dnm Nx:1024, Ny:128, D:2

<info>user distance:norm22</info>
1 ms
</elapsed_time>
Dnm::out Nx:1024, Ny:128
2 ms
</elapsed_time>
<elapsed_time value = "balanced_clustering::balanced_clustering(const Matrix_type& D, std::vector<size_t>& affectation = std::vector<size_t>())">

<info cost = ">894.061 </info>

<info @iter = "6" @cost = ">32.2568 </info>
2 ms
</elapsed_time>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "set_kernel(gaussian )"/>
<info value = "kernel_interface.op.set_map(const std::string& kernel)">scale_to_mean_distance</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_erfinv</info>
<info value = "kernel_interface.op.pipe_map(const std::string& kernel)">scale_to_unitcube</info>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
8 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
10 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.rescale(pi_array_type& x, pi_array_type& y, pi_array_type& z)">
<elapsed_time value = "kernel::rescale(const Matrix_type& x = Matrix_type(), const Matrix_type& y = Matrix_type(), const Matrix_type& z = Matrix_type())">

<info>Nx: 1000:Ny: 0:Nz: 0:D: 2</info>
<elapsed_time value = "gramiam_matrix::gramiam_matrix">
8 ms
</elapsed_time>
<info value = "scale_factor_map.set_scale_factor(0.738438")>0.738438</info>
10 ms
</elapsed_time>
</info>
<info value = "get_kernel_ptr()"/>
<info value = "set_kernel_ptr(kernel_ptr)"/>
<info value = "kernel_interface.set_polynomial_order(0)"/>
<info value = "kernel_interface.set_regularization(0.000000)"/>
<info value = "kernel_interface.discrepancy_error(pi_array_type& x, pi_array_type& y)">
</info>
